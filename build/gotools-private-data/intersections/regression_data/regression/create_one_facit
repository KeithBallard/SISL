#!/bin/sh
# Dette scriptet lager en enkelt facit-fil paa
# $HOME/projects/gotools/intersections/defects/solved/int_dir*.
# int_dir* er input.
# set -x
if [ "$#" -ne 1 ]
then
   echo "Usage: create_one_facit <int_dir*>"
   exit 1
fi
cd ..
reg_test_dir=$PWD
reg_dir=$reg_test_dir/regression
#echo "reg_dir:" $reg_dir
cd $reg_dir
dir1=$reg_test_dir/defects/solved
# resolfile=RESOLUTION.INP
direc=$dir1/$1

ls $direc > /dev/null 2>&1
if [ $? != 0 ] 
	then 
		echo "$1 nonexisting under $dir1"
		exit 1
fi
cd $direc
cp $reg_dir/$resolfile $resolfile > /dev/null 2>&1
ifile=$direc/reg.inp
ls $ifile > /dev/null 2>&1
if [ $? != 0 ] 
    then 
	echo "Warning: reg.inp not existing" 
	exit 1
fi
echo  "$direc/" > $direc/reg.err
itmp=$direc/inp.tmp
cmdtmp=$direc/cmd.tmp # global loop variable
ofiletmp=$direc/reg.facit.tmp
ofile=$direc/reg.facit
ls $ofile > /dev/null 2>&1
if [ $? = 0 ] 
    then 
	mv $ofile $direc/reg.facit.prev
fi

echo  > $itmp
echo  > $cmdtmp

cmdline= # $cmdline will contain the intersection call.

(while read w1 w2 # The w1 identifier defines if the rest of the line (w2)
                  # is the intersection call (*) or if it is an additional
                  # arguments to be read by standard input (%).
do
     if [ "$w1" = "*" ] # $w2 contains command line.
	then
	   echo "cmdline: " $cmdline 
	   if [ -f output.txt ]
	       then
	       echo "Removing output.txt"
	       rm output.txt
	   fi
	   (cat $itmp | $cmdline output.txt > $ofiletmp) 2>> $direc/reg.err
	   if [ -f output.txt ]
	       then
	       echo "Sorting result."
	       sort -n output.txt >> $ofile
	   fi
	   echo  > $itmp # Clearing content of $itmp
	   cmdline=$reg_dir/$w2
	   echo $cmdline > $cmdtmp
	elif [ "$w1" = "%" ] # $w2 contains standard input arguments.
	   then
	      echo $w2 >> $itmp
	else
	   echo hei > /dev/null
     fi
done < $ifile) # Reading from reg.inp the intersection calls, one line at
               # the time.

# We're done reading the file, the last intersection case still remains.
< $cmdtmp read cmdline # Standard input is taken from $cmdtmp, i.e. cmdline
                       # is filled with $cmdtmp
echo "cmdline: " $cmdline
if [ -f output.txt ]
    then
    echo "Removing output.txt"
    rm output.txt
fi
< $itmp $cmdline output.txt > $ofiletmp 2>> $direc/reg.err # samme som (*)
if [ -f output.txt ]
    then
    # The last intersection call was run outside the loop.
    echo "Sorting result."
    sort -n output.txt >> $ofile
fi

rm -f $resolfile > /dev/null 2>&1
rm -f $ofiletmp
rm -f $itmp
rm -f $cmdtmp

cd $reg_dir






      
     
